name: PIPELINE

on:
  push:
    branches: [main, develop]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  GOARCH: arm64
  ZIP_FILE: function.zip
  TF_LOG: INFO

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Load .env (non-sensitive)
        run: |
          if [ -f .env ]; then
            grep -E '^(AWS_REGION|GOARCH|ZIP_FILE)=' .env >> "$GITHUB_ENV" || true
          fi

      - uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Go tests
        run: go test -v ./...

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Load .env (non-sensitive)
        run: |
          if [ -f .env ]; then
            grep -E '^(AWS_REGION|GOARCH|ZIP_FILE)=' .env >> "$GITHUB_ENV" || true
          fi

      - uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build ZIP (Go â†’ bootstrap)
        run: |
          cd app
          GOOS=linux GOARCH=${GOARCH} CGO_ENABLED=0 \
            go build -ldflags="-s -w" -o bootstrap .
          zip -9 ../${ZIP_FILE} bootstrap
          cd ..
          ls -lh "${ZIP_FILE}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda
          path: ${{ env.ZIP_FILE }}
          retention-days: 5

  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra
    steps:
      - uses: actions/checkout@v4

      - name: Download lambda.zip
        uses: actions/download-artifact@v4
        with:
          name: lambda
          path: ./infra

      - name: Load .env (non-sensitive)
        run: |
          if [ -f "$GITHUB_WORKSPACE/.env" ]; then
            grep -E '^(AWS_REGION|GOARCH|ZIP_FILE)=' "$GITHUB_WORKSPACE/.env" >> "$GITHUB_ENV" || true
          fi

      # Configura credenciais AWS via OIDC (recomendado)
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # salve a ARN da role como secret
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform init
        run: terraform init

      - name: Terraform fmt
        run: terraform fmt -recursive -diff -check

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -input=false

      - name: Fail if plan failed
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply (main only)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false

  destroy:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    defaults:
      run:
        shell: bash
        working-directory: ./infra
    steps:
      - uses: actions/checkout@v4

      - name: Download lambda.zip
        uses: actions/download-artifact@v4
        with:
          name: lambda
          path: ./infra

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform init
        run: terraform init

      - name: Terraform plan (pre-destroy)
        run: terraform plan -destroy -input=false

      - name: Terraform destroy
        run: terraform destroy -input=false -auto-approve
