name: PIPELINE

on:
  push:
    branches: [main, develop]

env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  GOARCH: arm64
  ZIP_FILE: function.zip

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go 🤲
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Test 🤘
        run: go test -v ./...

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go 🤲
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build 🏋️ (Go -> bootstrap) e empacota
        run: |
          cd app
          GOOS=linux GOARCH=${GOARCH} CGO_ENABLED=0 \
            go build -ldflags="-s -w" -o bootstrap .
          zip -9 ../${ZIP_FILE} bootstrap
          cd ..
          ls -lh ${ZIP_FILE}

      - name: Upload Artifact 👆
        uses: actions/upload-artifact@v4
        with:
          name: lambda
          path: ${{ env.ZIP_FILE }}
          retention-days: 5

  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra
    steps:
      - uses: actions/checkout@v4

      - name: Download function.zip 👇
        uses: actions/download-artifact@v4
        with:
          name: lambda
          path: ./infra

      - name: Setup Terraform 🤲
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.5"

      - name: Debug (confere ZIP e env)
        run: |
          echo "AWS_REGION=${AWS_REGION}"
          echo "Esperando ZIP em: $(pwd)/function.zip"
          ls -lah .

      - name: Terraform init 🌛
        run: terraform init

      - name: Terraform format 💁
        run: terraform fmt -recursive -diff -check

      - name: Terraform Validate 🚦
        run: terraform validate

      - name: Terraform Plan 🍆
        id: plan
        run: terraform plan -input=false

      - name: Terraform Plan Status 🚅
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply 🍎 (apenas main)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -input=false -auto-approve

  destroy:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    defaults:
      run:
        shell: bash
        working-directory: ./infra
    steps:
      - uses: actions/checkout@v4

      - name: Download function.zip 👇
        uses: actions/download-artifact@v4
        with:
          name: lambda
          path: ./infra

      - name: Setup Terraform 🤲
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.5"

      - name: Terraform init 🌛
        run: terraform init

      - name: Terraform Plan (pre-destroy)
        run: terraform plan -destroy -input=false

      - name: Terraform Destroy 💣
        run: terraform destroy -input=false -auto-approve
